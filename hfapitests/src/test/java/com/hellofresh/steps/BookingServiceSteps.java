package com.hellofresh.steps;

import com.hellofresh.constants.BookingConstants;
import com.hellofresh.constants.CommonConstants;
import com.hellofresh.models.BookingModel;
import com.hellofresh.models.BookingServiceModel;
import com.hellofresh.utils.Context;
import com.hellofresh.utils.JSONUtils;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import org.junit.Assert;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Class containing all the step definitions for booking API
 */
public class BookingServiceSteps {
    private static final Logger LOGGER = LoggerFactory.getLogger(BookingServiceSteps.class);
    private BookingServiceModel bookingModel = new BookingServiceModel();
    private Map<String, Object> response = new HashMap<String, Object>();
    private JSONUtils jsonUtil = new JSONUtils();
    private Context context = new Context();

    @Given("^I make request to fetch all bookings$")
    public final void iFetchBookingDetals() throws Throwable {
        response.clear();

        //get all bookings
        response = bookingModel.getAllBookings();
    }

    @Given("^I make request to fetch created booking by id$")
    public final void iFetchCreatedBooking() throws Throwable {
        response.clear();

        //get booking using ID
        response = bookingModel.getBookingbyId(context.getBooking().getBookingid());
    }

    @Given("^I make a bookings with below details$")
    public final void iCreateABooking(Map<String, String> bookingDataTable) throws Throwable {
        response.clear();

        //get booking model from Map<String, String> data from cucumber feature
        BookingModel booking = bookingModel.getBookingFromMap(bookingDataTable);
        context.setBooking(booking);

        //make call to create booking endpoint
        response = bookingModel.createBooking(booking);

        //get autogenerated booking ID from response
        if ((int) response.get(CommonConstants.HTTP_STATUS_CODE) == CommonConstants.HTTP_STATUS_CREATED) {
            Map<String, Object> responseBody = jsonUtil.getJSONObjectFromString((String) response.get(CommonConstants.HTTP_RESPONSE_BODY), Map.class);
            context.getBooking().setBookingid((int) responseBody.get(BookingConstants.BOOKINGID_ATTR));
        }
    }

    @Then("^I get repsponse code as \"(.*?)\"$")
    public final void iGetResponseAs(int responseCode) throws Throwable {
        Assert.assertTrue("Response code is not correct.", ((int) response.get(CommonConstants.HTTP_STATUS_CODE)) == responseCode);
    }

    @Then("^I get at least 1 booking in response$")
    public final void iGetAtleastOneBooking() throws Throwable {
        //convert json string from response to map
        Map<String, Object> responseBody = jsonUtil.getJSONObjectFromString((String) response.get(CommonConstants.HTTP_RESPONSE_BODY), Map.class);

        //get all booking from map
        List<Object> bookings = (ArrayList<Object>) responseBody.get("bookings");

        //verify if at least one booking is returned
        Assert.assertTrue("Bookings are less than 1.", bookings.size() > 1);
    }

    @Then("^booking details matches$")
    public final void bookingDetailsMatch() throws Throwable {
        SimpleDateFormat shortDateFormater = new SimpleDateFormat(BookingConstants.SHORT_DATE_FORMAT);
        SimpleDateFormat longDateFormater = new SimpleDateFormat(BookingConstants.LONG_DATE_FORMAT);
        String shortCheckinDate = shortDateFormater.format(longDateFormater.parse(context.getBooking().getBookingDates().getCheckin()));
        String shortCheckoutDate = shortDateFormater.format(longDateFormater.parse(context.getBooking().getBookingDates().getCheckout()));

        //convert json from response to Booking object
        BookingModel booking = jsonUtil.getJSONObjectFromString((String) response.get(CommonConstants.HTTP_RESPONSE_BODY), BookingModel.class);

        //get booking does not return email and phone
        context.getBooking().setEmail(null);
        context.getBooking().setPhone(null);

        //get booking endpoint returns date in yyyy-MM-dd format
        context.getBooking().getBookingDates().setCheckin(shortCheckinDate);
        context.getBooking().getBookingDates().setCheckout(shortCheckoutDate);
        Assert.assertTrue("Bookings details are not matching.", booking.equals(context.getBooking()));
    }
}
